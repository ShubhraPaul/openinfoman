#!/usr/bin/env php
<?php
// Call WSDL2XFormsTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'WSDL2XFormsTest::main');
}

require_once 'PHPUnit/Framework.php';

error_reporting(E_ALL | E_STRICT);


/**
 * Test class for WSDL2XForms.
 * Generated by PHPUnit on 2008-12-07 at 15:16:28.
 */
class WSDL2XFormsTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var string Directory with WSDL2XForms executables
     */
    protected $binDir;

    /**
     * @var string Path to dir with WSDL files
     */
    protected $wsdlDir;

    /**
     * @var string Path to dir in which to put the generated XForms
     */
    protected $xformsDir;

    /**
     * @var sting Format string containing the command for wsdl2xforms
     */
    protected $wsdl2xformsCommand;

    /**
     * @var sting
     *      Format string containing the command to directly start Saxon with
     *      the WSDL2XForms XSLT
     */
    protected $saxonCommand;

    /**
     * @var sting[]
     *      Array of directories in which to put the generated XForms for
     *      specific XForms implementations
     */
    protected $targetImplementationDirs;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp()
    {
        $this->binDir = dirname(__FILE__) . '/../bin';
        $this->wsdlDir = dirname(__FILE__) . '/wsdls';
        $this->xformsDir = dirname(__FILE__) . '/xforms';
        $this->targetImplementationDirs['xsltforms'] = dirname(__FILE__) . '/xsltforms';
        $this->wsdl2xformsCommand = './wsdl2xforms.sh %s %s %s';
        $this->saxonCommand = 'java -jar ../lib/saxon9.jar -s:%s -o:%s -xsl:../src/wsdl2xforms.xsl %s %s'; 
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown()
    {
    }

    /**
     * @return array(integer=>array(string=>SplFileInfo|string|boolean))
     */
    public function getWsdlFiles() {
        $this->setUp();
        $files = array();
        foreach (new RecursiveIteratorIterator(new RecursiveDirectoryIterator($this->wsdlDir)) as $entry) {
            if ($entry->isFile() and substr($entry, -5) == '.wsdl') {
                //echo "$entry\n";
                $files[] = array( 'wsdlFile' => $entry->getFileInfo(), 'targetImplementation' => null, 'writedocuments' => true );
                $files[] = array( 'wsdlFile' => $entry->getFileInfo(), 'targetImplementation' => null, 'writedocuments' => false );
                foreach ( array_keys( $this->targetImplementationDirs ) as $targetImplementation ) {
                    $files[] = array( 'wsdlFile' => $entry->getFileInfo(), 'targetImplementation' => $targetImplementation, 'writedocuments' => true );
                }
            }
        }
        return $files;
    }

    /**
     * Tests XForms generation from WSDL descriptions
     *
     * @param string $targetImplementation XForms implementation the generated XForms shall be used with
     * @dataProvider getWsdlFiles
     */
    public function testWSDL2XForms(SplFileInfo $wsdlFile, $targetImplementation = null, $writedocuments = true) {
        $relativePathToWsdlFile = substr( $wsdlFile->getRealPath(), strlen( realpath( $this->wsdlDir ) ) + 1 );
        if (isset($this->targetImplementationDirs[$targetImplementation])) {
            $targetDir = $this->targetImplementationDirs[$targetImplementation] . '/' . str_replace('/', '-', $relativePathToWsdlFile);
        } else {
            $targetDir = $this->xformsDir . '/' . $relativePathToWsdlFile;
        }
        //echo substr($relativePathToWsdlFile, 1), "\n";
        if (!file_exists($targetDir)) {
            mkdir($targetDir, 0766, true);
        }
        if (!is_dir($targetDir)) {
            throw new Exception("Target directory '$targetDir' is not a directory.");
        } else {
            chdir($this->binDir);
            if ($writedocuments) {
                $command = sprintf($this->wsdl2xformsCommand,
                    escapeshellarg($wsdlFile->getRealPath()),
                    escapeshellarg(realpath($targetDir) . '/ignoredFileName' ),
                    escapeshellarg("targetImplementation=$targetImplementation")
                );
            } else {
                $command = sprintf($this->saxonCommand,
                    escapeshellarg($wsdlFile->getRealPath()),
                    escapeshellarg(realpath($targetDir) . '/writedocuments-false.xml' ),
                    escapeshellarg('"writedocuments=false()"'),
                    escapeshellarg("targetImplementation=$targetImplementation")
                );
                //TODO: these files should go into a separate directory in order
                //to not mix them up with the test cases with writedocuments=true
            }
            //echo "$command\n";
            exec($command);
            foreach (new DirectoryIterator($targetDir) as $outputFile) {
                if ($outputFile->isFile()) {
                    $outputFileName = $outputFile->getFileName();
                    //echo "    $outputFileName\n";
                    $actual = file_get_contents($outputFile->getPathname());
                    $expectedFile = "$targetDir/.svn/text-base/$outputFileName.svn-base";
                    $expected = file_get_contents($expectedFile);
                    $this->assertEquals($expected, $actual);
                    // TODO: xmldiff
                    // TODO: svn diff (necessary?)
                    // TODO: execute UI in some way, if possible
                    // TODO: try sending the SOAP instance with some default values
                }
            }
        }
    }

    public function testServiceInvocation() {
        $ukCompaniesHouseEmulator = new SOAPClient( $this->wsdlDir . '/generated-by-instantsvc/ukCompaniesHouseEmulatorRpcEnc.wsdl' );
        $ukDisqualifiedDirectors = $ukCompaniesHouseEmulator->checkDisqualifiedDirectorsRegister( 'smith' );
        //var_export( $ukDisqualifiedDirectors );
        $this->assertEquals( 60, count($ukDisqualifiedDirectors) );
    }

    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';

        $suite  = new PHPUnit_Framework_TestSuite('WSDL2XFormsTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

}

// Call WSDL2XFormsTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'WSDL2XFormsTest::main') {
    WSDL2XFormsTest::main();
}
?>
